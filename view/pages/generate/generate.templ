package generate

import (
	"fmt"
	"pixelvista/types"
	"pixelvista/view/layout"
	"strconv"
)

type ViewData struct {
	Images     []types.Image
	FormParams FormParams
	FormErrors FormErrors
}

templ GeneratePage(data ViewData) {
	@layout.App(true) {
		<div class="flex w-full h-[calc(100vh-70px)]">
			<div class="w-[300px] bg-base-200 border-r h-full p-4">
				@GenerateForm(data.FormParams, data.FormErrors)
			</div>
			<div class="flex-1 bg">
				@ImageGallery(data.Images)
			</div>
		</div>
	}
}

type FormErrors struct {
	Prompt string
	Amount string
}

type FormParams struct {
	Prompt string
	Amount int
}

templ GenerateForm(params FormParams, errors FormErrors) {
	<form
		hx-post="/generate"
		hx-swap="outerHTML"
	>
		<div>
			<label class="form-control">
				<div class="label">
					<span class="label-text">Enter your prompt</span>
				</div>
				<textarea name="prompt" class="textarea texarea-bordered h-24">{ params.Prompt }</textarea>
				if len(errors.Prompt) > 0 {
					<div class="label flex flex-col">
						<span class="label-text text-error">{ errors.Prompt }</span>
					</div>
				}
				<div class="label">
					<span class="label-text">How many Images</span>
				</div>
				<div class="join">
					for _, amount := range amounts {
						if isChecked(amount,strconv.Itoa(params.Amount)) {
							<input class="join-item btn" type="radio" value={ amount } checked name="amount" aria-label={ amount }/>
						} else {
							<input class="join-item btn" type="radio" value={ amount } name="amount" aria-label={ amount }/>
						}
					}
				</div>
				if len(errors.Amount) > 0 {
					<div class="label flex flex-col">
						<span class="label-text text-error">{ errors.Amount }</span>
					</div>
				}
				<button class="btn btn-outline btn-accent w-full">Generate</button>
			</label>
		</div>
	</form>
}

func isChecked(value string, currentAmount string) bool {
	if value == currentAmount {
		return true
	}
	return false
}

var amounts = []string{"1", "2", "4", "8"}

templ GalleryImage(image types.Image) {
	if image.Status == types.ImageStatusCompleted {
		<div class="bg-base-300 aspect-[3/4] rounded-xl border cursor-pointer">
			<img src={ image.ImageUrl } class="w-full h-full rounded-xl"/>
		</div>
	} else if image.Status == types.ImageStatusFailed {
		<div class="bg-red-200 aspect-[3/4] flex-col flex justify-center items-center rounded-xl ">
			<i class="text-4xl fa-solid fa-bug text-error"></i>
		</div>
	} else if image.Status == types.ImageStatusPending {
		<div
			hx-get={ fmt.Sprintf("/generate/image/status/%d", image.ID) }
			hx-trigger="load delay:3s"
			hx-swap="outerHTML"
			class="bg-base-300 aspect-[3/4] flex-col flex justify-center items-center rounded-xl "
		>
			<span class="loading loading-spinner loading-lg text-primary-content"></span>
		</div>
	}
}

templ ImageGallery(images []types.Image) {
	<div id="gallery" class="grid grid-cols-4 p-4 gap-2">
		for _,image := range images {
			@GalleryImage(image)
		}
	</div>
}
